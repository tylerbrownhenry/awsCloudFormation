---
AWSTemplateFormatVersion: '2010-09-09'
Description: Sample API Gateway deployment with async Lambda function
Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  HelloWorldFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function
          from time import sleep
          def lambda_handler(event, context):
            print('Got: key={}'.format(event.get('key')))
            sleep(10)
            print('Finished sleeping')
            return {'headers': {}, 'body': 'Hello world'}
      Timeout: 30
      Description: Hello world
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7

  HelloWorldAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: HelloWorldAPI
      Description: Hello world API
      FailOnWarnings: true

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt HelloWorldFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":", Ref: "HelloWorldAPI", "/*" ]]

  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  APIGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchLogsRole.Arn

  HelloWorldPost:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ "arn:aws:apigateway:", Ref: "AWS::Region", ":lambda:path/2015-03-31/functions/", "Fn::GetAtt": HelloWorldFunction.Arn, "/invocations" ]]
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
           integration.request.header.X-Amz-Invocation-Type: "'Event'"
      ResourceId: !GetAtt HelloWorldAPI.RootResourceId
      RestApiId: !Ref HelloWorldAPI
      MethodResponses:
        - StatusCode: 200

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: HelloWorldPost
    Properties:
      RestApiId: !Ref HelloWorldAPI
      StageName: LATEST